
(defvar find-file-root-prefix (if (featurep 'xemacs) "/[sudo/root@localhost]" "/su::" )
  "*The filename prefix used to open a file with `find-file-root'.")

(setq find-file-root-prefix "/su::")

(defvar find-file-root-history nil
  "History list for files found using `find-file-root'.")

(defvar find-file-root-hook nil
  "Normal hook for functions to run after finding a \"root\" file.")

(defun find-file-root ()
  "*Open a file as the root user.
   Prepends `find-file-root-prefix' to the selected file name so that it
   maybe accessed via the corresponding tramp method."

  (interactive)
  (require 'tramp)
  (let* ( ;; We bind the variable `file-name-history' locally so we can
         ;; use a separate history list for "root" files.
         (file-name-history find-file-root-history)
         (name (or buffer-file-name default-directory))
         (tramp (and (tramp-tramp-file-p name)
                     (tramp-dissect-file-name name)))
         path dir file)

    ;; If called from a "root" file, we need to fix up the path.
    (when tramp
      (setq path (tramp-file-name-path tramp)
            dir (file-name-directory path)))

    (when (setq file (read-file-name "root: " dir path))
      (find-file (concat find-file-root-prefix file))
      ;; If this all succeeded save our new history list.
      (setq find-file-root-history file-name-history)
      ;; allow some user customization
      (run-hooks 'find-file-root-hook))))


(defun mt-find-next-double-word ()
  "move to next doubled word, ignoring <...> tags and any
  whitespace (including new lines)."
  (interactive)
  (re-search-forward "\\<\\([a-z]+\\)\\([\n \t]\\|<[^>]+>\\)+\\1\\>"))


(defun mt-toggle-utf8-latin1 () 
  (interactive)
  (if(or (equal buffer-file-coding-system 'utf-8-unix)
         (equal buffer-file-coding-system 'mule-utf-8-unix))
      (progn 
        (set-buffer-file-coding-system 'latin-1)(save-buffer)
        (message "buffer converted to latin-1")
        ) 
    (set-buffer-file-coding-system 'utf-8)(save-buffer)
    (message "buffer converted to utf-8")
    )
  )

(defun mt-goto-last-edit ()
  "Moves point to the buffer's last edit."
  (interactive)
  (if (or (null buffer-undo-list) (eq buffer-undo-list t))
      (message "This buffer has not been edited yet.")
    (let ((tail (cdr buffer-undo-list))
	  (last-pos nil))
      (while (and tail (null last-pos))
	(setq next (car tail))
	(cond
	 ((integerp next) (setq last-pos next))
	 ((atom next) nil)
	 ((stringp (car next)) (setq last-pos (abs (cdr next))))
	 ((integerp (car next)) (setq last-pos (cdr next)))
	 ((null (car next)) nil))
        ;;;(message (count-lines-page))
	(setq tail (cdr tail)))
      (if last-pos
	  (goto-char last-pos)
	(message "Cannot find last edit.")))))


;;; Terminus Font
(defun mt-terminus-font (bold)
  "Sets the Terminus font. With a prefix argument, turns bold weight on."
  (interactive "P")
  (let ((weight (if bold "bold" "medium")))
    (set-default-font
     (format "-xos4-terminus-%s-*-*-*-20-*-*-*-*-*-*-*" weight))))

(defun mt-revert-font ()
  "Back to the standard 9x15 fontset."
  (interactive)
  (set-default-font "9x15"))

(defun mt-choose-frame-setup (&optional arg)
  (interactive "P")
  (setq color-theme-is-global nil)
  (when window-system
    (set-face-font 'default mt-default-font)
    (mt-setup-frame arg))
  (when (not window-system)
    (mt-setup-frame-nox)))


(defun mt-fontset-menu ()
  (interactive)
  (x-popup-menu
   `((0 0) ,(selected-frame)) 
   (append x-fixed-font-alist
           (list (generate-fontset-menu)))))


(defun mt-toggle-font (&optional arg)
  (interactive "P")
  (if mt-is-default-font
      (progn
        (message mt-other-font)
        (set-face-font 'default mt-other-font)
        (setq mt-is-default-font nil))
    (progn
      (message mt-default-font)
      (set-face-font 'default mt-default-font)
      (setq mt-is-default-font t)))
  (mt-setup-frame))
  
(defun mt-setup-frame-nox ()
  (interactive)
  (message "no X")
  (color-theme-nox))

(defun mt-setup-frame (&optional arg)
  (interactive "P")
  (tool-bar-mode -1)
  (when (not arg)
    (load "color-theme-pop")
    (color-theme-pop))
  (when arg
    (load "color-theme-dd")
    (color-theme-dd)))
    
(defun mt-line-comment-and-duplicate()
  "Comment a line and duplicate it."
  (interactive)
  (let (
        (beg (line-beginning-position))
        (end (+ 1 (line-end-position))))
    (copy-region-as-kill beg end)
    (comment-region beg end)
    (beginning-of-line)
    (forward-line 1)
    (yank)
    (forward-line -1)))

(defun mt-major-mode-p (symbol)
  "Return non-nil if SYMBOL is a major mode.
Used in `interactive' forms to read major mode names from the user."
  (and (fboundp symbol)
       (let ((function-name (symbol-name symbol)))
         (and (string-match "-mode\\'" function-name)
              (not (string-match "\\`turn-\\(on\\|off\\)-"
                                 function-name))))
       (not (assq symbol minor-mode-alist))))

(defun mt-read-major-mode ()
  "Read a major mode from the user, and return it.
Based on Kevin Rogers' `edit-region' interactive spec."
  (intern (completing-read
           (format "Major mode (default `%s'): " major-mode)
           obarray 'mt-major-mode-p t nil nil
           (symbol-name major-mode))))

(defun mt-edit-region (&optional edit-mode)
  "Edit the current region in a separate buffer.
With a prefix arg, change `major-mode' to EDIT-MODE."
  (interactive (list (when current-prefix-arg (mt-read-major-mode))))
  (clone-indirect-buffer nil t)
  (narrow-to-region (region-beginning) (region-end))
  (shrink-window-if-larger-than-buffer)
  (when edit-mode (funcall edit-mode)))

(defun mt-kill-mode-buffers (&optional mode)
  "Kill all buffers of this major mode.
With optional argument MODE, all buffers in major mode MODE are killed
instead."
  (interactive (list (when current-prefix-arg (ted-read-major-mode))))
  (setq mode (or mode major-mode))
  (when (or current-prefix-arg
            (y-or-n-p (format "Really kill all %s buffers? " mode)))
    (mapc (lambda (buffer)
            (when (with-current-buffer buffer
                    (eq major-mode mode))
              (kill-buffer buffer)))
          (buffer-list))))



(defun fix-backspace ()
  "Map control-h to work as backspace"
  (interactive)
  (keyboard-translate ?\C-h ?\C-?)
  (global-set-key [(hyper h)] 'help-command))

(defun mt-switch-dictionarry()
  (interactive)
  (let* ((dic (if (boundp 'ispell-local-dictionary) ispell-local-dictionary ispell-dictionary))
         (change (if (string= dic "german8") "english" "german8")))
    (set (make-local-variable 'ispell-local-dictionary) change)
    (message "Dictionary switched to %s" change)
    ))

(defun mt-transpose-windows (arg)
  "Transpose the buffers shown in two windows."
  (interactive "p")
  (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
    (while (/= arg 0)
      (let ((this-win (window-buffer))
            (next-win (window-buffer (funcall selector))))
        (set-window-buffer (selected-window) next-win)
        (set-window-buffer (funcall selector) this-win)
        (select-window (funcall selector)))
      (setq arg (if (plusp arg) (1- arg) (1+ arg))))))


(defun mt-mail-mail-setup ()
  (turn-on-auto-fill)
  (set-fill-column 66)
  (flyspell-mode 1)
  (bs-config-clear)
  (add-hook 'mew-init-hook 'bbdb-insinuate-mew)
  (setq bs-default-configuration "mail")
  (ispell-change-dictionary "german8")
  (mapc
   (lambda (mapping) 
     (apply #'define-key mew-draft-mode-map mapping))
   `(
     (,(kbd "C-c i") mt-quoted-insert-file)
     )))

(add-hook 'mew-draft-mode-hook 'mt-mail-mail-setup)

(defun mt-eshell-here ()
  "Run eshell in the current directory."
  (interactive)
  (let ((dir default-directory))
    (eshell)
    (unless (string= default-directory dir)
      (message "Switching to %s" dir)
      (eshell/cd (list dir))
      (eshell-emit-prompt))))

(defun mt-occur (&optional arg)
  "Switch to *Occur* buffer, or run `occur'.
Without a prefix argument, switch to the buffer.
With a universal prefix argument, run occur again.
With a numeric prefix argument, run occur with NLINES
set to that number."
  (interactive "P")
  (if (and (not arg) (get-buffer "*Occur*"))
      (switch-to-buffer "*Occur*")
    (occur (read-from-minibuffer "Regexp: ")
           (if (listp arg) 0 arg))))

(add-hook 'occur-mode-hook
          (lambda ()
            (local-set-key (kbd "<f1>") 'occur-next-error)))

(defun mt-text-setup ()
  "Setup a text buffer,"
  (line-number-mode 1)
  (mt-turn-on-show-trailing-whitespace)
  (auto-fill-mode 1))

(require 'w3m-e21)
(provide 'w3m-e23)


(defun mt-w3m-setup ()
  "Setup a w3m buffer."
  (set (make-local-variable 'auto-hscroll-mode) nil)
  ;; (setq browse-url-browser-function 'w3m-browse-url
  ;;       browse-url-new-window-flag f)
  (setq w3m-use-cookies t
        w3m-cookie-accept-bad-cookies t
        w3m-use-tab nil
        w3m-use-tab-menubar nil
        w3m-auto-show nil)
  (mapc
   (lambda (mapping)
     (apply #'define-key w3m-mode-map mapping))
   `((,(kbd "C-c C-@") lui-track-next-buffer)
     (,(kbd "<down>") next-line)
     (,(kbd "<up>") previous-line)
     (,(kbd "<right>") forward-char)
     (,(kbd "<left>") backward-char)
     (,(kbd "C-x b") ido-switch-buffer))))

(defun mt-rcirc-setup ()
  "Setup a rcirc buffer."
  (flyspell-mode 1)
  (unicode-helper-mode 1)
  (rcirc-track-minor-mode 1)
  (size-indication-mode -1)
  (line-number-mode -1)
  (size-indication-mode -1)
  (display-time-mode -1)
  (abbrev-mode 1)
  (bs-config-clear)
  (setq bs-default-configuration "rcirc")
  (set (make-local-variable 'scroll-conservatively) 8192)
  (setq local-abbrev-table mt-rcirc-mode-abbrev-table)
  (setq rcirc-fill-column 60)
  (set (make-local-variable 'rcirc-fill-prefix) "           ")
  (mapc
   (lambda (mapping) 
     (apply #'define-key rcirc-mode-map mapping))
   `(
     (,(kbd "M-q") rcirc-unfill)
     (,(kbd "C-x x") mt-ruby-xmp-region)
     )))



(defun mt-newsticker-setup ()
  "Setup a newsticker buffer."
  (setq newsticker-automatically-mark-items-as-old t)
  (setq newsticker-automatically-mark-visited-items-as-old t)
  (setq newsticker-hide-old-items-in-newsticker-buffer t)
  (setq newsticker-retrieval-interval 600)
  (setq newsticker--auto-narrow-to-item nil)
  (setq newsticker--auto-narrow-to-feed nil)
  )

(defun mt-dylan-setup ()
  "Setup a dylan buffer."
  (line-number-mode 1)
  (abbrev-mode 1)
  (filladapt-mode 1)
  (set (make-local-variable 'auto-hscroll-mode) nil)
  (mapc
   (lambda (mapping)
     (apply #'define-key dylan-mode-map mapping))
   `(
     (,(kbd "C-c C-c") compile)
     )))

(defun mt-haskell-setup ()
  "Setup a haskell buffer."
  (line-number-mode 1)
  (abbrev-mode 1)
  (filladapt-mode 1)
  (set (make-local-variable 'auto-hscroll-mode) nil)
  (turn-on-font-lock)
  (turn-on-haskell-decl-scan)
  (turn-on-haskell-doc-mode)
  (turn-on-haskell-indent)
  (set-variable 'haskell-program-name "ghci")
  (setq compile-command  "make")
  (setq comment-padding " ")
  (setq comment-start "--"))
(mapc
 (lambda (mapping)
   (apply #'define-key haskell-mode-map mapping))
 `(
   (,(kbd "C-c C-c") compile)
   (,(kbd "TAB") mt-indent-or-complete)
   (,(kbd "C-c C-s") run-haskell)
   (,(kbd "C-c C-I") imenu)
   ))

(add-to-list 'filladapt-token-table '("-- " haskell-comment))
(add-to-list 'filladapt-token-match-table '(haskell-comment haskell-comment))
(add-to-list 'filladapt-token-conversion-table '(haskell-comment . exact))

(defun mt-sass-setup ()
  (mapc
   (lambda (mapping)
     (apply #'define-key sass-mode-map mapping))
   `((,(kbd "RET") newline-and-indent)
     )))

(defun mt-haml-setup ()
  (mapc
   (lambda (mapping)
     (apply #'define-key haml-mode-map mapping))
   `((,(kbd "RET") newline-and-indent)
     )))

(defun mt-howmc-setup ()
  ;; (mapc
  ;;  (lambda (mapping)
  ;;    (apply #'define-key howm-mode-map mapping))
  ;;  `((,(kbd "RET") haml-indent-line)
  ;;    ))
)


(defun mt-html-setup ()
  "Initialize the HTML mode for my purposes."
  (set (make-local-variable 'time-stamp-start)
       "<!-- time stamp start -->\n")
  (set (make-local-variable 'time-stamp-end)
       "\n<!-- time stamp end -->")
  (set (make-local-variable 'time-stamp-format)
       "<p class=\"timestamp\">Last modified: %3a %3b %2d %02H:%02M:%02S %Z %:y</p>")
  (set (make-local-variable 'time-stamp-line-limit) 0)
  (when (= (point-min)
           (point-max))
    (let ((ins nil))
      (if (string-match "\\.ht$" (buffer-file-name))
          (progn
            (insert "<h1>")
            (setq ins (point))
            (insert "</h1>\n")
            (insert "\n"
                    "<!-- time stamp start -->\n"
                    "\n"
                    "<!-- time stamp end -->\n"))
        (insert "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
                "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n"
                "                      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n"
                "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n"
                "<head>\n"
                "<link rel=\"stylesheet\" type=\"text/css\" href=\"screen.css\"/>\n"
                "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n"
                "<title>")
        (setq ins (point))
        (insert "</title>\n"
                "</head>\n"
                "\n"
                "<body>\n"
                "<h1></h1>\n"
                "\n"
                "\n"
                "\n"
                "<hr />\n"
                "<address>"
                "ackro.ath.cx"
                "</address>\n"
                "<!-- Created: "
                (format-time-string "%a %b %e %T %Z %Y")
                " -->\n"
                "<!-- time stamp start -->\n"
                "\n"
                "<!-- time stamp end -->\n"
                "</body> </html>\n"))
      (goto-char ins))))

(defun mt-turn-on-show-trailing-whitespace ()
  "Set `show-trailing-whitespace' to t."
  (setq show-trailing-whitespace t))

(defun mt-try-complete-abbrev (old)
  (if (expand-abbrev) t nil))

(defadvice comment-dwim (around xmp-hack activate)
  ""
  (if (and (eq last-command 'comment-dwim))
      (insert "=>")  ad-do-it))

(defun mt-isearch-occur ()
  "Invoke `occur' from within isearch."
  (interactive)
  (let ((case-fold-search isearch-case-fold-search))
    (occur (if isearch-regexp isearch-string (regexp-quote isearch-string)))))

(defun mt-match-paren (arg)
  "Go to the matching paren if on a paren; otherwise insert %."
  (interactive "p")
  (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
        ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
        (t (self-insert-command (or arg 1)))))

(defun isearch-yank-regexp (regexp)
  "Pull REGEXP into search regexp." 
  (let ((isearch-regexp nil)) ;; Dynamic binding of global.
    (isearch-yank-string regexp))
  (isearch-search-and-update))
  
(defun isearch-yank-symbol (&optional partialp)
  "Put symbol at current point into search string.
  
  If PARTIALP is non-nil, find all partial matches."
  (interactive "P")
  (let* ((sym (find-tag-default))
         ;; Use call of `re-search-forward' by `find-tag-default' to
         ;; retrieve the end point of the symbol.
         (sym-end (match-end 0))
         (sym-start (- sym-end (length sym))))
    (if (null sym)
        (message "No symbol at point")
      (goto-char sym-start)
      ;; For consistent behavior, restart Isearch from starting point
      ;; (or end point if using `isearch-backward') of symbol.
      (isearch-search)
      (if partialp
          (isearch-yank-string sym)
        (isearch-yank-regexp
         (concat "\\_<" (regexp-quote sym) "\\_>"))))))
  
(defun isearch-current-symbol (&optional partialp)
  "Incremental search forward with symbol under point.
  
  Prefixed with \\[universal-argument] will find all partial
  matches."
  (interactive "P")
  (let ((start (point)))
    (isearch-forward-regexp nil 1)
    (isearch-yank-symbol partialp)))
  
;; by xsteve
(defun mt-show-message-buffer (arg)
  "Show the *message* buffer.
When called with a prefix argument, show the *trace-output* buffer."
  (interactive "P")
  (let ((buffer (current-buffer)))
    (pop-to-buffer (if arg "*trace-output*" "*Messages*"))
    (goto-char (point-max))
    (recenter -12)
    (pop-to-buffer buffer)))

(defun mt-show-scratch-buffer ()
  "Show the *scratch* buffer."
  (interactive)
  (let ((buffer (current-buffer)))
    (pop-to-buffer "*scratch*")
    (goto-char (point-max))
    (recenter -12)
    (pop-to-buffer buffer)))


(defun isearch-backward-current-symbol (&optional partialp)
  "Incremental search backward with symbol under point.
  
  Prefixed with \\[universal-argument] will find all partial
  matches."
  (interactive "P")
  (let ((start (point)))
    (isearch-backward-regexp nil 1)
    (isearch-yank-symbol partialp)))

;; 10.12.2001; xsteve
;; 17.03.2008; Michael 'mictro' Trommer <mictro@gmail.com>, Nato (international code)
(setq nato-alphabet
'(("A" . "Alfa") ("B" . "Bravo") ("C" . "Charlie") ("D" . "Delta") ("E" . "Echo")
  ("F" . "Foxtrot") ("G" . "Golf") ("H" . "Hotel") ("I" . "India") ("J" . "Juliet")
  ("K" . "Kilo") ("L" . "Lima") ("M" . "Mike") ("N" . "November") ("O" . "Oscar")
  ("P" . "Papa") ("Q" . "Quebec") ("R" . "Romeo") ("S" . "Sierra") ("T" . "Tango")
  ("U" . "Uniform") ("V" . "Victor") ("W" . "Whiskey") ("X" . "Xray")
  ("Y" . "Yankee") ("Z" . "Zulu") ("1" . "One") ("2" . "Two") ("3" . "Three") 
  ("4" . "Four") ("5" . "Five") ("6" . "Six") ("7" . "Seven") ("8" . "Eight")
  ("9" . "Nine") ("0" . "Zero") (" " . "_")))

;; 10.12.2001; xsteve
;; 17.03.2008; Michael 'mictro' Trommer <mictro@gmail.com>, use region
(defun nato-on-region (beg end)
  (interactive "r")
  (insert 
   (format "%s" 
           (mapcar (lambda (ch)
                     (cdr (assoc (char-to-string ch) nato-alphabet))) (upcase (buffer-substring beg end)))))
  (kill-region beg end))


(defun mt-insert-signature ()
  (interactive)
  (insert (shell-command-to-string "mksig")))

(defvar url-nonrelative-link "\\`\\([-a-zA-Z0-9+.]+:\\)"
  "A regular expression that will match an absolute URL.")

(defun mt-textile-region-to-file (start end)
  (interactive "r")
  "Save current region in a temporarily file and return the filename as string"
  (shell-command-on-region start end (concat "2textile.rb" " ")))

(defun mt-qp-decode (start end)
  (interactive "r")
  (let ((coding-system-for-read 'latin-1))
    (shell-command-on-region start end (concat "qp -d" " ") t))
  (fill-region start end))

(defun mt-nopaste-region-to-file (start end)
  "Save current region in a temporarily file and return the filename as string"
  (let ((filename (make-temp-file "/tmp/nopaste")))
    (kill-ring-save start end)
    (find-file filename)
    (yank)
    (save-buffer)
    (kill-buffer (substring filename 5))
    filename))

(defun mt-nopaste-send (file)
  (message (concat "pasting with " nopaste-facility))
  (kill-new
   (shell-command-to-string (concat nopaste-facility " " file))))

(defun mt-nopaste-region (start end)
  "Send the current region to nopaste"
  (interactive "r")
  (mt-nopaste-send (mt-nopaste-region-to-file start end)))


(defun mt-insert-last-paste ()
  "Insert last paste url from ~/.lastpste"
  (interactive)
  (save-excursion
    (insert-file-literally "/home/mit/.lastpste"))
  (goto-char (point-at-eol)))

(defun mt-kill-file-and-buffer ()
  "Removes file associated to current buffer."
  (interactive )
  (when (y-or-n-p (concat "Delete " buffer-file-name "? "))
    (delete-file (buffer-file-name))
    (kill-buffer nil)))

(defun mt-insert-ackro-post-skel (comp)
  "Insert what we're playing right now."
  (interactive "sComponent? ")
  (save-excursion
    (let ((coding-system-for-read 'latin-1))
      (call-process "/home/mit/bin/backbite" nil t nil (concat "polis gen post " comp)))
    (backward-delete-char 1))
  (goto-char (point-at-eol)))


;;25.07.2000; xsteve
(defun mt-copy-buffer-file-name-as-kill(choice)
  "Copy the buffer-file-name to the kill-ring"
  (interactive "cCopy BufferName (f)ull, (d)irectory, (n)ame, (w)ikiname or (q)uit?")
  ;(message "your choice %c" choice)
  (let ((new-kill-string)
        (name (if (eq major-mode 'dired-mode)
                  (dired-get-filename)
                (or (buffer-file-name) ""))))
    (cond ((eq choice ?f)
           (setq new-kill-string name))
          ((eq choice ?d)
           (setq new-kill-string (file-name-directory name)))
          ((eq choice ?n)
           (setq new-kill-string (file-name-nondirectory name)))
          ((eq choice ?w)
           (setq new-kill-string (run-hook-with-args-until-success 'planner-annotation-functions))))
    (when new-kill-string
      (message "%s copied" new-kill-string)
      (kill-new new-kill-string))))


;;08.04.2003: Kai Großjohann
;;2008-03-17: Michael 'mictro' Trommer <mictro@gmail.com>, use prefix
(defun mt-increment-number-at-point (amount)
  "Increment number at point by given AMOUNT."
  (interactive "P")
  (let ((bounds (bounds-of-thing-at-point 'symbol))
        (old-num (number-at-point)))
    (unless old-num
      (error "No number at point"))
    (delete-region (car bounds) (cdr bounds))
    (insert (format "%d" (+ old-num (if amount amount 1))))))


(defun mt-insert-mpd-np (prefix)
  "Insert what we're playing right now."
  (interactive "P")
  (save-excursion
    (let ((coding-system-for-read 'utf-8))
      (call-process "/home/mit/bin/np" nil t nil (if prefix "ssh" "")))
    (backward-delete-char 1))
  (goto-char (point-at-eol)))

(defun mt-insert-userid ()
  "Insert the my full name and address"
  (interactive)
  (insert "Michael 'mictro' Trommer <mictro@gmail.com>"))

(defun mt-indent-buffer ()
  (interactive)
  (save-excursion
    (indent-region (point-min) (point-max) nil)))

(require 'calendar)
(defun mt-insert-any-date (&optional days)
  (interactive "p*")
  (insert
   (calendar-date-string
    (calendar-gregorian-from-absolute
     (+ (calendar-absolute-from-gregorian (calendar-current-date))
        days)))))

(defun mt-insert-date (prefix)
  "Insert the current date. With prefix-argument, use ISO format. With
two prefix arguments, write out the day and month name."
  (interactive "P")
  (let ((format (cond
                 ((not prefix) "%Y-%m-%d")
                 ((equal prefix '(4)) "%d.%m.%Y")
                 (t "%A, %d. %B %Y")))
        (system-time-locale "de_DE"))
    (insert (format-time-string format))))


(defun mt-kill-to-beginning-of-line ()
  "Kill from the beginning of the line to point."
  (interactive)
  (kill-region (point-at-bol)
               (point)))

(defun mt-remove-cr ()
  "Remove all occurrences of ^M in the current buffer."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "\r" nil t)
      (replace-match ""))))

(defun mt-quoted-insert-file (name delim)
  "Insert contents of a file with a delimiter, as in mail."
  (interactive "*fInsert file: \nsDelimiter (default \"> \"):")
  (if (string= ""delim) (setq delim "> "))
  (insert-file name)
  (replace-regexp "^"delim))

(defun mt-unfill-paragraph ()
  (interactive)
  (let ((fill-column (point-max)))
    (fill-paragraph nil)))

(defun mt-indent-or-complete ()
  "Complete if point is at end of a word, otherwise indent line."
  (interactive)
  (if snippet
      (snippet-next-field)
    (if (looking-at "\\>")
        (dabbrev-expand nil)
      (indent-for-tab-command))))

(defun mt-insert-gpl-v2 ()
  "Insert standard GPL header."
  (interactive "*")
  (insert "# programm - the description\n"
          "# Copyright (C) Michael 'mictro' Trommer <mictro@gmail.com>\n"
          "#\n"
          "# This program is free software; you can redistribute it and/or\n"
          "# modify it under the terms of the GNU General Public License\n"
          "# as published by the Free Software Foundation; either version 2\n"
          "# of the License, or (at your option) any later version.\n"
          "#\n"
          "# This program is distributed in the hope that it will be useful,\n"
          "# but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
          "# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
          "# GNU General Public License for more details.\n"
          "#\n"
          "# You should have received a copy of the GNU General Public License\n"
          "# along with this program; if not, write to the Free Software\n"
          "# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n"
          "#\n\n"))

(defun mt-lorem ()
  "Insert a lorem ipsum."
  (interactive)
  (insert "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do "
          "eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad "
          "minim veniam, quis nostrud exercitation ullamco laboris nisi ut "
          "aliquip ex ea commodo consequat. Duis aute irure dolor in "
          "reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla "
          "pariatur. Excepteur sint occaecat cupidatat non proident, sunt in "
          "culpa qui officia deserunt mollit anim id est laborum."))


(defun mt-eshell-maybe-bol ()
  (interactive)
  (let ((p (point)))
    (eshell-bol)
    (if (= p (point))
        (beginning-of-line))))

(defun mt-dict-cc (word)
  (interactive "sWord: ")
  (w3m-browse-url 
   (format "http://dict.cc/?s=%s" 
           (w3m-url-encode-string word))))

(defun mt-google (what)
  "Use google to search for WHAT."
  (interactive "sSearch: ")
  (w3m-browse-url (concat "http://www.google.de/search?q="
                          (w3m-url-encode-string what))))

(defun mt-choose-browser (url &rest args)
  (interactive "sURL: ")
  (if (y-or-n-p "External browser? ")
      (mt-browse-url-firefox-new-tab url)
    (w3m-browse-url url)))

(defun mt-browse-url-firefox-new-tab (url &optional new-window)
  "Open URL in a new tab in Firefox."
  (interactive (browse-url-interactive-arg "URL: "))
  (shell-command-to-string (concat "btab '" url "'" )))

(defun rfc (num)
  "Show RFC NUM in a buffer."
  (interactive "nRFC (0 for index): ")
  (let ((url (if (zerop num)
                 "http://www.ietf.org/iesg/1rfc_index.txt"
               (format "http://www.ietf.org/rfc/rfc%i.txt" num)))
        (buf (get-buffer-create "*RFC*")))
    (with-current-buffer buf
      (let ((inhibit-read-only t))
        (delete-region (point-min) (point-max))
        (let ((proc (start-process "wget" buf "wget" "-q" "-O" "-" url)))
          (set-process-sentinel proc 'rfc-sentinel))
        (message "Getting RFC %i..." num)))))

(defun rfc-sentinel (proc event)
  "Sentinel for `rfc'."
  (with-current-buffer (process-buffer proc)
    (goto-char (point-min))
    (view-mode 1)
    (when (fboundp'rfcview-mode)
      (rfcview-mode)))
  (display-buffer (process-buffer proc)))

(provide 'mt-functions)
