#!/usr/bin/env ruby
require 'optparse'
require 'rdoc/usage'

module QuotedPrintable
  MAX_LINE_PRINTABLE_ENCODE_LENGTH = 76

  def from_qp
    result = self.gsub(/=\r\n/, "")
    result.gsub!(/\r\n/m, $/)
    result.gsub!(/=([\dA-F]{2})/) { $1.hex.chr }
    result
  end

  def to_qp(handle_xml = false)
    char_mask = if (handle_xml)
                  /[^!-%,-;=?-~\s]/
                else
                  /[^!-<>-~\s]/
                end

    # encode the non-space characters
    result = self.gsub(char_mask)  { |ch| "=%02X" % ch[0] }
    # encode the last space character at end of line
    result.gsub!(/(\s)(?=#{$/})/o) { |ch| "=%02X" % ch[0] }

    lines = result.scan(/(?:(?:[^\n]{74}(?==[\dA-F]{2}))|(?:[^\n]{0,76}(?=\n))|(?:[^\n]{1,75}(?!\n{2})))(?:#{$/}*)/);
    lines.join("=\n").gsub(/#{$/}/m, "\r\n")
  end

  def QuotedPrintable.encode
    STDOUT.binmode
    while (line = gets) do
      print line.to_qp
    end
  end

  def QuotedPrintable.decode
    STDIN.binmode
    while (line = gets) do
      # I am a ruby newbie, and I could
      # not get gets to get the \r\n pairs
      # no matter how I set $/ - any pointers?
      line = line.chomp + "\r\n"
      print line.from_qp
    end
  end

end

class String
  include QuotedPrintable
end

if __FILE__ == $0

  opts = OptionParser.new
  opts.on("-h", "--help")   { RDoc::usage; }
  opts.on("-d", "--decode") { $decode = true }
  opts.on("-x", "--xml")    { $handle_xml = true }

  opts.parse!(ARGV) rescue RDoc::usage('usage')

  if ($decode)
    QuotedPrintable.decode()
  else
    QuotedPrintable.encode()
  end
end
